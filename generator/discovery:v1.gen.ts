// Copyright 2022 Luca Casonato. All rights reserved. MIT license.
/**
 * API Discovery Service Client for Deno
 * =====================================
 * 
 * Provides information about other Google APIs, such as what APIs are available, the resource, and method details for each API.
 * 
 * Docs: https://developers.google.com/discovery/
 * Source: https://googleapis.deno.dev/v1/discovery:v1.ts
 */

import { Auth } from "../auth/mod.ts";

/**
 * Provides information about other Google APIs, such as what APIs are
 * available, the resource, and method details for each API.
 */
export class Discovery {
  #auth: Auth;
  #baseUrl: string;

  constructor(auth: Auth, baseUrl: string = "https://www.googleapis.com/discovery/v1/") {
    this.#auth = auth;
    this.#baseUrl = baseUrl;
  }

  /**
   * Retrieve the description of a particular version of an api.
   *
   * @param version The version of the API.
   * @param api The name of the API.
   */
  async apisGetRest(version: string, api: string): Promise<RestDescription> {
    const url = new URL(`${this.#baseUrl}apis/${api}/${version}/rest`);
    const resp = await this.#auth.request(url.href, {
      method: "GET",
    });
    if (resp.status >= 500) {
      const body = await resp.text();
      throw new Error(`${resp.status} ${resp.statusText}: ${body}`);
    }
    return resp.json();
  }

  /**
   * Retrieve the list of APIs supported at this endpoint.
   *
   */
  async apisList(opts: ApisListOptions = {}): Promise<DirectoryList> {
    const url = new URL(`${this.#baseUrl}apis`);
    if (opts.preferred !== undefined) {
      url.searchParams.append("preferred", String(opts.preferred));
    }
    if (opts.name !== undefined) {
      url.searchParams.append("name", String(opts.name));
    }
    const resp = await this.#auth.request(url.href, {
      method: "GET",
    });
    if (resp.status >= 500) {
      const body = await resp.text();
      throw new Error(`${resp.status} ${resp.statusText}: ${body}`);
    }
    return resp.json();
  }
}

/**
 * Additional options for Discovery#apisList.
 */
export interface ApisListOptions {
  /**
   * Return only the preferred version of an API.
   */
  preferred?: boolean;
  /**
   * Only include APIs with the given name.
   */
  name?: string;
}

export interface JsonSchema {
  /**
   * Unique identifier for this schema.
   */
  id?: string;
  /**
   * The value type for this schema. A list of values can be found here:
   * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.1
   */
  type?: string;
  /**
   * Whether this parameter may appear multiple times.
   */
  repeated?: boolean;
  /**
   * In a variant data type, the value of one property is used to determine how
   * to interpret the entire entity. Its value must exist in a map of
   * descriminant values to schema names.
   */
  variant?: {
    map?: {
      $ref?: string;
      type_value?: string;
    }[];
    discriminant?: string;
  };
  /**
   * The maximum value of this parameter.
   */
  maximum?: string;
  /**
   * An additional regular expression or key that helps constrain the value.
   * For more details see:
   * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5.23
   */
  format?: string;
  /**
   * If this is a schema for an array, this property is the schema for each
   * element in the array.
   */
  items?: JsonSchema;
  /**
   * If this is a schema for an object, list the schema for each property of
   * this object.
   */
  properties?: {
    [key: string]: JsonSchema
  };
  /**
   * A description of this object.
   */
  description?: string;
  /**
   * Values this parameter may take (if it is an enum).
   */
  enum?: string[];
  /**
   * Additional information about this property.
   */
  annotations?: {
    required?: string[];
  };
  /**
   * The descriptions for the enums. Each position maps to the corresponding
   * value in the "enum" array.
   */
  enumDescriptions?: string[];
  /**
   * Whether this parameter goes in the query or the path for REST requests.
   */
  location?: string;
  /**
   * The default value of this property (if one exists).
   */
  default?: string;
  /**
   * The value is read-only, generated by the service. The value cannot be
   * modified by the client. If the value is included in a POST, PUT, or PATCH
   * request, it is ignored by the service.
   */
  readOnly?: boolean;
  /**
   * If this is a schema for an object, this property is the schema for any
   * additional properties with dynamic keys on this object.
   */
  additionalProperties?: JsonSchema;
  /**
   * A reference to another schema. The value of this property is the "id" of
   * another schema.
   */
  $ref?: string;
  /**
   * The regular expression this parameter must conform to. Uses Java 6 regex
   * format:
   * http://docs.oracle.com/javase/6/docs/api/java/util/regex/Pattern.html
   */
  pattern?: string;
  /**
   * The minimum value of this parameter.
   */
  minimum?: string;
  /**
   * Whether the parameter is required.
   */
  required?: boolean;
}

export interface DirectoryList {
  /**
   * The kind for this response.
   */
  kind?: string;
  /**
   * The individual directory entries. One entry per api/version pair.
   */
  items?: {
    icons?: {
      x32?: string;
      x16?: string;
    };
    discoveryRestUrl?: string;
    title?: string;
    labels?: string[];
    kind?: string;
    version?: string;
    preferred?: boolean;
    id?: string;
    discoveryLink?: string;
    name?: string;
    description?: string;
    documentationLink?: string;
  }[];
  /**
   * Indicate the version of the Discovery API used to generate this doc.
   */
  discoveryVersion?: string;
}

export interface RestResource {
  /**
   * Methods on this resource.
   */
  methods?: {
    [key: string]: RestMethod
  };
  /**
   * Sub-resources on this resource.
   */
  resources?: {
    [key: string]: RestResource
  };
}

export interface RestDescription {
  /**
   * The version of this API.
   */
  revision?: string;
  /**
   * The name of the owner of this API. See ownerDomain.
   */
  ownerName?: string;
  /**
   * The title of this API.
   */
  title?: string;
  /**
   * The version of this API.
   */
  version?: string;
  /**
   * The root URL under which all API services live.
   */
  rootUrl?: string;
  /**
   * Indicate the version of the Discovery API used to generate this doc.
   */
  discoveryVersion?: string;
  /**
   * Authentication information.
   */
  auth?: {
    oauth2?: {
      scopes?: {
        [key: string]: {
          description?: string;
        }
      };
    };
  };
  /**
   * Common parameters that apply across all apis.
   */
  parameters?: {
    [key: string]: JsonSchema
  };
  /**
   * Labels for the status of this API, such as labs or deprecated.
   */
  labels?: string[];
  /**
   * The path for REST batch requests.
   */
  batchPath?: string;
  /**
   * Enable exponential backoff for suitable methods in the generated clients.
   */
  exponentialBackoffDefault?: boolean;
  /**
   * The protocol described by this document.
   */
  protocol?: string;
  /**
   * The name of this API.
   */
  name?: string;
  /**
   * API-level methods for this API.
   */
  methods?: {
    [key: string]: RestMethod
  };
  /**
   * The ETag for this response.
   */
  etag?: string;
  /**
   * The kind for this response.
   */
  kind?: string;
  /**
   * A link to human readable documentation for the API.
   */
  documentationLink?: string;
  /**
   * The base path for all REST requests.
   */
  servicePath?: string;
  version_module?: boolean;
  /**
   * Links to 16x16 and 32x32 icons representing the API.
   */
  icons?: {
    x32?: string;
    x16?: string;
  };
  /**
   * The description of this API.
   */
  description?: string;
  /**
   * The schemas for this API.
   */
  schemas?: {
    [key: string]: JsonSchema
  };
  /**
   * [DEPRECATED] The base path for REST requests.
   */
  basePath?: string;
  /**
   * A list of supported features for this API.
   */
  features?: string[];
  /**
   * [DEPRECATED] The base URL for REST requests.
   */
  baseUrl?: string;
  /**
   * The domain of the owner of this API. Together with the ownerName and a
   * packagePath values, this can be used to generate a library for this API
   * which would have a unique fully qualified name.
   */
  ownerDomain?: string;
  /**
   * The ID of this API.
   */
  id?: string;
  /**
   * The resources in this API.
   */
  resources?: {
    [key: string]: RestResource
  };
  /**
   * Indicates how the API name should be capitalized and split into various
   * parts. Useful for generating pretty class names.
   */
  canonicalName?: string;
  /**
   * The package of the owner of this API. See ownerDomain.
   */
  packagePath?: string;
}

export interface RestMethod {
  /**
   * Media upload parameters.
   */
  mediaUpload?: {
    maxSize?: string;
    protocols?: {
      simple?: {
        multipart?: boolean;
        path?: string;
      };
      resumable?: {
        multipart?: boolean;
        path?: string;
      };
    };
    accept?: string[];
  };
  /**
   * Whether this method supports subscriptions.
   */
  supportsSubscription?: boolean;
  /**
   * The URI path of this REST method. Should be used in conjunction with the
   * basePath property at the api-level.
   */
  path?: string;
  /**
   * The URI path of this REST method in (RFC 6570) format without level 2
   * features ({+var}). Supplementary to the path property.
   */
  flatPath?: string;
  /**
   * Whether this method supports media downloads.
   */
  supportsMediaDownload?: boolean;
  /**
   * Whether this method supports media uploads.
   */
  supportsMediaUpload?: boolean;
  /**
   * HTTP method used by this method.
   */
  httpMethod?: string;
  /**
   * The schema for the request.
   */
  request?: {
    parameterName?: string;
    $ref?: string;
  };
  /**
   * Indicates that downloads from this method should use the download service
   * URL (i.e. "/download"). Only applies if the method supports media download.
   */
  useMediaDownloadService?: boolean;
  /**
   * The schema for the response.
   */
  response?: {
    $ref?: string;
  };
  /**
   * Ordered list of required parameters, serves as a hint to clients on how to
   * structure their method signatures. The array is ordered such that the
   * "most-significant" parameter appears first.
   */
  parameterOrder?: string[];
  /**
   * Description of this method.
   */
  description?: string;
  /**
   * A unique ID for this method. This property can be used to match methods
   * between different versions of Discovery.
   */
  id?: string;
  /**
   * OAuth 2.0 scopes applicable to this method.
   */
  scopes?: string[];
  /**
   * Whether this method requires an ETag to be specified. The ETag is sent as
   * an HTTP If-Match or If-None-Match header.
   */
  etagRequired?: boolean;
  /**
   * Details for all parameters in this method.
   */
  parameters?: {
    [key: string]: JsonSchema
  };
}